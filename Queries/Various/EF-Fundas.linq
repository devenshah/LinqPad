<Query Kind="Program">
  <NuGetReference>EntityFramework</NuGetReference>
  <Namespace>System.ComponentModel.DataAnnotations</Namespace>
  <Namespace>System.ComponentModel.DataAnnotations.Schema</Namespace>
  <Namespace>System.Data.Entity</Namespace>
  <Namespace>System.Data.Entity.Core</Namespace>
  <Namespace>System.Data.Entity.Core.Common</Namespace>
  <Namespace>System.Data.Entity.Core.Common.CommandTrees</Namespace>
  <Namespace>System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder</Namespace>
  <Namespace>System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial</Namespace>
  <Namespace>System.Data.Entity.Core.Common.EntitySql</Namespace>
  <Namespace>System.Data.Entity.Core.EntityClient</Namespace>
  <Namespace>System.Data.Entity.Core.Mapping</Namespace>
  <Namespace>System.Data.Entity.Core.Metadata.Edm</Namespace>
  <Namespace>System.Data.Entity.Core.Objects</Namespace>
  <Namespace>System.Data.Entity.Core.Objects.DataClasses</Namespace>
  <Namespace>System.Data.Entity.Infrastructure</Namespace>
  <Namespace>System.Data.Entity.Infrastructure.Annotations</Namespace>
  <Namespace>System.Data.Entity.Infrastructure.DependencyResolution</Namespace>
  <Namespace>System.Data.Entity.Infrastructure.Design</Namespace>
  <Namespace>System.Data.Entity.Infrastructure.Interception</Namespace>
  <Namespace>System.Data.Entity.Infrastructure.MappingViews</Namespace>
  <Namespace>System.Data.Entity.Infrastructure.Pluralization</Namespace>
  <Namespace>System.Data.Entity.Migrations</Namespace>
  <Namespace>System.Data.Entity.Migrations.Builders</Namespace>
  <Namespace>System.Data.Entity.Migrations.Design</Namespace>
  <Namespace>System.Data.Entity.Migrations.History</Namespace>
  <Namespace>System.Data.Entity.Migrations.Infrastructure</Namespace>
  <Namespace>System.Data.Entity.Migrations.Model</Namespace>
  <Namespace>System.Data.Entity.Migrations.Sql</Namespace>
  <Namespace>System.Data.Entity.Migrations.Utilities</Namespace>
  <Namespace>System.Data.Entity.ModelConfiguration</Namespace>
  <Namespace>System.Data.Entity.ModelConfiguration.Configuration</Namespace>
  <Namespace>System.Data.Entity.ModelConfiguration.Conventions</Namespace>
  <Namespace>System.Data.Entity.Spatial</Namespace>
  <Namespace>System.Data.Entity.SqlServer</Namespace>
  <Namespace>System.Data.Entity.SqlServer.Utilities</Namespace>
  <Namespace>System.Data.Entity.Utilities</Namespace>
  <Namespace>System.Data.Entity.Validation</Namespace>
</Query>

void Main()
{
	
}

public void ReadEntitiesIncludedInContext()
{
	using(var context = new SalesContext())
	{
		var oc = (context as IObjectContextAdapter).ObjectContext;
		foreach (var entity in oc.MetadataWorkspace.GetItems<EntityType>(DataSpace.CSpace).ToList())
		{
			Debug.WriteLine(entity.FullName);
		}
	}
}

///By deriving each context from base class, we ensure they all point to the same database
public class SalesContext : BaseContext<SalesContext>, ISalesContext
{
	public DbSet<LineItem> LineItems { get; set; }
	
	public void SetModified(object entity)
	{
		Entry(entity).State = EntityState.Modified;
	}
	
	public void SetAdd(object entity)
	{
		Entry(entity).State = EntityState.Added;
	}
	
	protected override void OnModelCreating(DbModelBuilder modelBuilder)
	{
		modelBuilder.Configurations.Add(new LineItemMap());
	}
	
}

///Base class for multiple context
public class BaseContext<TContext> : DbContext where TContext : DbContext
{
	static BaseContext()
	{
		Database.SetInitializer<TContext>(null);
	}
	
	protected BaseContext() 
		:base("name=CompanyDatabase")
	{
	
	}
}

public class CompanyDatabaseContext : DbContext
{
	//This context will have all the tables that are required for creating the correct database
	//hence this is not derived from BaseContext as we want to use this to initialise database
	//and run migrations on 
}

public class LineItem
{
	public int LineItemId { get; set; }
	public int ProductId { get; set; }
	public int Quantity { get; set; }
	public decimal PricePerItem { get; set; }
	public decimal LineItemTotal { get; set; }
	//readonly properties will not be persisted
	public string Today { get; private set; }
}

public class LineItemMap: EntityTypeConfiguration<LineItem>
{
	public LineItemMap()
	{
		//To avoid  persisting read write property
		Ignore(t => t.LineItemTotal);
	}
}

///Following repository is generated by t4scaffolding
public interface ILineItemRepository : IEntityRepository<LineItem>
{
}

public interface IEntityRepository<T> : IDisposable
{
	IQueryable<LineItem> All { get; }
	IQueryable<LineItem> AllIncluding(params Expression<Func<T, object>>[] includeProperties);
	T Find(int id);
	void InsertOrUpdate(T entity);
	void Delete(int id);
	void Save();
}

public class LineItemRepository : ILineItemRepository
{
	SalesContext context = new SalesContext();
	
	public IQueryable<LineItem> All
	{
		get {return context.LineItems;}
	}
	public IQueryable<LineItem> AllIncluding(params Expression<Func<LineItem, object>>[] includeProperties)	
	{
		IQueryable<LineItem> query = context.LineItems;
		foreach (var includeProperty in includeProperties)
		{
			query = query.Include(includeProperty);
		}
		return query;
	}
	
	public LineItem Find(int id)
	{
		return context.LineItems.Find(id);
	}
	
	public void Delete(int id)
	{
		var lineItem = context.LineItems.Find(id);
		context.LineItems.Remove(lineItem);
	}
	
	public void Save()
	{
		context.SaveChanges();
	}
	
	public void Dispose()
	{
		context.Dispose();
	}
	
	public void InsertOrUpdate(LineItem lineItem)
	{
		if (lineItem.LineItemId == default(int))
		{
			context.SetAdd(lineItem);
		}
		else
		{
			context.SetModified(lineItem);
		}
	}
}






public interface ISalesContext
{
	IDBSet<LineItem> LineItems {get; }
	int SaveChanges();
	void SetModified(object entity);
	void SetAdd(object entity);
}



